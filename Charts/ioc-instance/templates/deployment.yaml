{{- /*
Default the derivable substitution values.

This keeps the length of the values.txt file for each individual IOC
to a minimum
*/ -}}
{{- $location := default .Values.location .Values.beamline -}}
{{- $ioc_group := default .Values.ioc_group $location -}}
{{- $opisClaim := default (print $ioc_group "-opi-claim") .Values.opisClaim -}}
{{- $runtimeClaim := default (print $ioc_group "-runtime-claim") .Values.runtimeClaim -}}
{{- $autosaveClaim := default (print $ioc_group "-autosave-claim") .Values.autosaveClaim -}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
    location: {{ $location }}
    ioc_group: {{ $ioc_group }}
    is_ioc: "true"
spec:
  replicas: 1
  podManagementPolicy: Parallel  # force rollout from a failing state
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        location: {{ $location }}
        ioc_group: {{ $ioc_group }}
        is_ioc: "true"
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}  # force roll out for config changes
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName | quote }}
      {{- end }}
      hostNetwork: {{ .Values.hostNetwork }}
      terminationGracePeriodSeconds: 3 # nice to have quick restarts on IOCs
      volumes:
        - name: runtime-volume
          persistentVolumeClaim:
            claimName: {{ $runtimeClaim }}
        - name: opis-volume
          persistentVolumeClaim:
            claimName: {{ $opisClaim }}
        {{- if .Values.nfsv2TftpClaim }}
        - name: nfsv2-tftp-volume
          persistentVolumeClaim:
            claimName: {{ .Values.nfsv2TftpClaim }}
        {{- end }}
        - name: {{ .Release.Name }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-autosave
        {{- if .Values.dataVolume.pvc }}
        - name: {{ .Release.Name }}-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-data
        {{- else if .Values.dataVolume.hostPath }}
        - name: {{ .Release.Name }}-data
          hostPath:
            path: {{ .Values.dataVolume.hostPath }}
            type: Directory
        {{- end }}
        - name: config-volume
          configMap:
            name: {{ .Release.Name }}-config
      containers:
      - name: {{ .Release.Name }}
        image: {{ .Values.image }}
        command:
          - {{ .Values.startCommand }}
        args:
          - {{ .Values.startArgs }}
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - {{ .Values.liveness }}
          initialDelaySeconds: 120
          periodSeconds: 10
        lifecycle:
          preStop:
            exec:
              command: ["bash", "-c", "{{ .Values.stop }}"]
        volumeMounts:
        - name: config-volume
          mountPath: {{ .Values.iocConfig }}
        - name: {{ .Release.Name }}-autosave
          mountPath: /autosave
        {{- if or (.Values.dataVolume.pvc) (.Values.dataVolume.hostPath)  }}
        - name: {{ .Release.Name }}-data
          mountPath: {{ .Values.dataVolume.hostPath }}
          {{- if .Values.dataVolume.hostPath }}
          mountPropagation: HostToContainer
          {{- end}}
        {{- end }}
        {{- if .Values.nfsv2TftpClaim }}
        - name: nfsv2-tftp-volume
          mountPath: /nfsv2-tftp
          subPath: "{{ $ioc_group }}/{{ .Release.Name }}"
        {{- end }}
        - name: runtime-volume
          mountPath: /epics/runtime
          subPath: "{{ .Release.Name }}"
        - name: opis-volume
          mountPath: /epics/opi
          subPath: "{{ .Release.Name }}"
        stdin: true
        tty: true
        securityContext:
{{  toYaml .Values.securityContext | indent 10}}
        resources:
{{  toYaml .Values.resources | indent 10}}
        imagePullPolicy: Always
        env:
        - name: IOCSH_PS1
          value: "{{ .Release.Name }} > "
        - name: IOC_NAME
          value: {{ .Release.Name }}
        - name: IOC_PREFIX
          value: {{ or .Values.prefix .Release.Name | quote }}
        - name: IOC_LOCATION
          value: {{ $location | quote }}
        - name: BEAMLINE
          value: {{ .Values.beamline | quote }}
        - name: IOC_GROUP
          value: {{ $ioc_group | quote }}
        {{- if .Values.globalEnv }}
{{  toYaml .Values.globalEnv | indent 8}}
        {{- end }}
        {{- if .Values.iocEnv }}
{{  toYaml .Values.iocEnv | indent 8}}
        {{- end }}
      {{- if .Values.nodeName }}
      nodeName: {{ .Values.nodeName }}
      {{- else if .Values.useAffinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            {{ if .Values.beamline -}}
            - matchExpressions:
              - key: beamline
                operator: In
                values:
                  - {{ .Values.beamline }}
            {{- else -}}
            - matchExpressions:
              - key: location
                operator: In
                values:
                  - {{ $location }}
            {{- end }}
      {{- end }}
      tolerations:
        - key: beamline
          operator: Equal
          value: {{ .Values.beamline }}
          effect: NoSchedule
        - key: location
          operator: Equal
          value: {{ $location }}
          effect: NoSchedule
      {{- if .Values.tolerations }}
{{  toYaml .Values.tolerations | indent 8}}
      {{- end }}

{{ if .Values.dataVolume.pvc }}
---
# This IOC uses a data volume, so we will create a PVC for it
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-data
  labels:
    app: {{ .Release.Name }}
    {{ if .Values.beamline -}}
    beamline: {{ .Values.beamline }}
    {{- else -}}
    location: {{ .Values.location }}
    {{- end }}
    ioc_group: {{ $ioc_group }}
    is_ioc: "true"
spec:
{{- if .Values.dataVolume.spec }}
{{  toYaml .Values.dataVolume.spec | indent 2 }}
{{ else }}
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1000Mi
{{- end }}
{{ else }}
# This IOC has no data volume, so we will mount the host filesystem
{{- end }}
