{{- /*
Default the derivable substitution values.

This keeps the length of the values.txt file for each individual IOC
to a minimum
*/ -}}
{{- $location := default .Values.global.location .Values.location | required "ERROR - You must supply location or global.location" -}}
{{- $ioc_group := default .Values.global.ioc_group .Values.ioc_group | required "ERROR - You must supply ioc_group or global.ioc_group" -}}
{{- $opisClaim := default (print $ioc_group "-opi-claim") .Values.opisClaim -}}
{{- $runtimeClaim := default (print $ioc_group "-runtime-claim") .Values.runtimeClaim -}}
{{- $autosaveClaim := default (print $ioc_group "-autosave-claim") .Values.autosaveClaim -}}
{{- $image := .Values.image | required "ERROR - You must supply image." -}}

{{- $enabled := eq .Values.global.enabled false | ternary false true -}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
    location: {{ $location }}
    ioc_group: {{ $ioc_group }}
    enabled: {{ $enabled | quote }}
    is_ioc: "true"
spec:
  replicas: {{ $enabled | ternary 1 0 }}
  podManagementPolicy: Parallel  # force rollout from a failing state
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        location: {{ $location }}
        ioc_group: {{ $ioc_group }}
        is_ioc: "true"
        # re-deploy in case the configMap has changed - use a random value
        # unless the Commit Hash is supplied (by ArgoCD or helm command line)
        rollme: {{ .Values.global.commitHash | default (randAlphaNum 5) | quote }}
    spec:
      {{- with .Values.runtimeClassName }}
      runtimeClassName: {{ . }}
      {{- end }}
      {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . | quote }}
      {{- end }}
      hostNetwork: {{ .Values.hostNetwork }}
      terminationGracePeriodSeconds: 3 # nice to have quick restarts on IOCs
      volumes:
        - name: runtime-volume
          persistentVolumeClaim:
            claimName: {{ $runtimeClaim }}
        - name: opis-volume
          persistentVolumeClaim:
            claimName: {{ $opisClaim }}
        - name: autosave-volume
          persistentVolumeClaim:
            claimName: {{ $autosaveClaim }}
        {{- with .Values.nfsv2TftpClaim }}
        - name: nfsv2-tftp-volume
          persistentVolumeClaim:
            claimName: {{ . }}
        {{- end }}
        {{- if .Values.dataVolume.pvc }}
        - name: {{ .Release.Name }}-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-data
        {{- else }}
        {{- with .Values.dataVolume.hostPath }}
        - name: {{ .Release.Name }}-data
          hostPath:
            path: {{ . }}
            type: Directory
        {{- end }}
        {{- end }}
        - name: config-volume
          configMap:
            name: {{ .Release.Name }}-config
        {{- with .Values.volumes }}
{{  toYaml . | indent 8}}
        {{- end }}
      containers:
      - name: {{ .Release.Name }}
        image: {{ .Values.image }}
        command:
        {{- if (kindIs "string" .Values.startCommand) }}
        - {{ .Values.startCommand }}
        {{- else if (kindIs "slice" .Values.startCommand) }}
        {{- .Values.startCommand | toYaml | nindent 8 }}
        {{- end }}
        args:
        {{- if (kindIs "string" .Values.startArgs) }}
        - {{ .Values.startArgs }}
        {{- else if (kindIs "slice" .Values.startArgs) }}
        {{- .Values.startArgs | toYaml | nindent 8 }}
        {{- end }}
        livenessProbe:
          exec:
            command:
            {{- if (kindIs "string" .Values.liveness) }}
            - /bin/bash
            - {{ .Values.liveness }}
            {{- else if (kindIs "slice" .Values.liveness) }}
            {{- .Values.liveness | toYaml | nindent 12 }}
            {{- end }}
          initialDelaySeconds: 120
          periodSeconds: 10
        lifecycle:
          preStop:
            exec:
              command:
              {{- if (kindIs "string" .Values.stop) }}
              - /bin/bash
              - {{ .Values.stop }}
              {{- else if (kindIs "slice" .Values.stop) }}
              {{- .Values.stop | toYaml | nindent 14 }}
              {{- end }}
        volumeMounts:
        - name: config-volume
          mountPath: {{ .Values.iocConfig }}
        {{- if or (.Values.dataVolume.pvc) (.Values.dataVolume.hostPath)  }}
        - name: {{ .Release.Name }}-data
          mountPath: {{ .Values.dataVolume.hostPath }}
          {{- if .Values.dataVolume.hostPath }}
          mountPropagation: HostToContainer
          {{- end}}
        {{- end }}
        {{- if .Values.nfsv2TftpClaim }}
        - name: nfsv2-tftp-volume
          mountPath: /nfsv2-tftp
          subPath: "{{ $ioc_group }}/{{ .Release.Name }}"
        {{- end }}
        - name: runtime-volume
          mountPath: /epics/runtime
          subPath: "{{ .Release.Name }}"
        - name: opis-volume
          mountPath: /epics/opi
          subPath: "{{ .Release.Name }}"
        - name: autosave-volume
          mountPath: /autosave
          subPath: "{{ .Release.Name }}"
        {{- with .Values.volumeMounts }}
{{  toYaml . | indent 8}}
        {{- end }}
        stdin: true
        tty: true
        {{- with .Values.securityContext }}
        securityContext:
{{  toYaml . | indent 10}}
        {{- end }}
        {{- with .Values.resources }}
        resources:
{{  toYaml . | indent 10}}
        {{- end }}
        imagePullPolicy: Always
        env:
        - name: IOCSH_PS1
          value: "{{ .Release.Name }} > "
        - name: IOC_NAME
          value: {{ .Release.Name }}
        - name: IOC_PREFIX
          value: {{ or .Values.prefix .Release.Name | quote }}
        - name: IOC_LOCATION
          value: {{ $location | quote }}
        - name: IOC_GROUP
          value: {{ $ioc_group | quote }}
        {{- with .Values.globalEnv }}
{{  toYaml . | indent 8}}
        {{- end }}
        {{- with .Values.iocEnv }}
{{  toYaml . | indent 8}}
        {{- end }}
      {{- with .Values.nodeName }}
      nodeName: {{ . }}
      {{- else with .Values.affinity }}
      affinity:
{{  toYaml . | indent 8}}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{  toYaml . | indent 8}}
      {{- end }}

{{ if .Values.dataVolume.pvc }}
---
# This IOC uses a data volume, so we will create a PVC for it
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-data
  labels:
    app: {{ .Release.Name }}
    location: {{ $location }}
    ioc_group: {{ $ioc_group }}
    is_ioc: "true"
spec:
{{- if .Values.dataVolume.spec }}
{{  toYaml .Values.dataVolume.spec | indent 2 }}
{{ else }}
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1000Mi
{{- end }}
{{ else }}
# This IOC has no data volume, so we will mount the host filesystem
{{- end }}
